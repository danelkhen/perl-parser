{"success":false}
5.010
5.01
(5 . 010)
#######################################################################
{"success":true}
ref []
ref([]);
ref([])
#######################################################################
{"success":true}
$x_1{b}
$x_1{'b'};
$x_1{'b'}
#######################################################################
{"success":true}
die 'c'
die('c');
die('c')
#######################################################################
{"success":true}
lc $x_1
lc($x_1);
lc($x_1)
#######################################################################
{"success":true}
ref [] 
ref([]);
ref([])
#######################################################################
{"success":true}
$$x_1==0
($$x_1 == 0);
($$x_1 == 0)
#######################################################################
{"success":true}
$$x_1==1
($$x_1 == 1);
($$x_1 == 1)
#######################################################################
{"success":true}
$x_1 = 1
($x_1 = 1);
($x_1 = 1)
#######################################################################
{"success":true}
$x_1 > 1
($x_1 > 1);
($x_1 > 1)
#######################################################################
{"success":true}
ref $x_1
ref($x_1);
ref($x_1)
#######################################################################
{"success":true}
return 0
(return (0));
return(0)
#######################################################################
{"success":true}
return 1
(return (1));
return(1)
#######################################################################
{"success":true}
$x_1 = []
($x_1 = []);
($x_1 = [])
#######################################################################
{"success":true}
$x_1 == 0
($x_1 == 0);
($x_1 == 0)
#######################################################################
{"success":true}
$x_1->{b}
$x_1->{'b'};
$x_1->{'b'}
#######################################################################
{"success":true}
return []
(return ([]));
return([])
#######################################################################
{"success":true}
$x_1 = [] 
($x_1 = []);
($x_1 = [])
#######################################################################
{"success":true}
$x_1 = {} 
($x_1 = {});
($x_1 = {})
#######################################################################
{"success":true}
$x_2->$x_1
$x_2->$x_1;
$x_2->$x_1
#######################################################################
{"success":true}
die "$x_i"
die("$x_i");
die("$x_i")
#######################################################################
{"success":true}
each %$x_1
each(%$x_1);
each(%$x_1)
#######################################################################
{"success":true}
keys %$x_1
keys(%$x_1);
keys(%$x_1)
#######################################################################
{"success":true}
ref($x_1) 
ref($x_1);
ref($x_1)
#######################################################################
{"success":true}
return 'c'
(return ('c'));
return('c')
#######################################################################
{"success":true}
return [] 
(return ([]));
return([])
#######################################################################
{"success":true}
$x_1 / $x_2
($x_1 / $x_2);
($x_1 / $x_2)
#######################################################################
{"success":true}
$x_1 // 'c'
($x_1 // 'c')
($x_1 // 'c')
#######################################################################
{"success":true}
$x_1 < $x_2
($x_1 < $x_2);
($x_1 < $x_2)
#######################################################################
{"success":true}
$x_1 = $x_2
($x_1 = $x_2);
($x_1 = $x_2)
#######################################################################
{"success":true}
$x_1 > $x_2
($x_1 > $x_2);
($x_1 > $x_2)
#######################################################################
{"success":true}
$x_1 eq 'c'
($x_1 eq 'c');
($x_1 eq 'c')
#######################################################################
{"success":true}
$x_1->{'c'}
$x_1->{'c'};
$x_1->{'c'}
#######################################################################
{"success":false}
keys func_1
keys(func_1());
keys(func_1)
#######################################################################
{"success":true}
return $x_1
(return ($x_1));
return($x_1)
#######################################################################
{"success":true}
scalar $x_1
scalar($x_1);
scalar($x_1)
#######################################################################
{"success":true}
"$x_i". $x_1
("$x_i" . $x_1);
("$x_i" . $x_1)
#######################################################################
{"success":true}
$x_1 //= 'c'
($x_1 //= 'c');
($x_1 //= 'c')
#######################################################################
{"success":true}
$x_1 < @$x_2
($x_1 < @$x_2);
($x_1 < @$x_2)
#######################################################################
{"success":true}
$x_1 <= $x_2
($x_1 <= $x_2);
($x_1 <= $x_2)
#######################################################################
{"success":false}
$x_1 =~ $x_2
($x_1 =~ /$x_2/);
($x_1 =~ $x_2)
#######################################################################
{"success":true}
$x_1 =~ /$x/
($x_1 =~ /$x/);
($x_1 =~ /$x/)
#######################################################################
{"success":true}
$x_1 >= $x_2
($x_1 >= $x_2);
($x_1 >= $x_2)
#######################################################################
{"success":true}
$x_1->[$x_2]
$x_1->[$x_2];
$x_1->[$x_2]
#######################################################################
{"success":true}
$x_1->func_1
$x_1->func_1;
$x_1->func_1
#######################################################################
{"success":true}
$x_1->{$x_2}
$x_1->{$x_2};
$x_1->{$x_2}
#######################################################################
{"success":true}
$x_1->{'c'} 
$x_1->{'c'};
$x_1->{'c'}
#######################################################################
{"success":true}
$x_1{b}//= 0
($x_1{'b'} //= 0);
($x_1{'b'} //= 0)
#######################################################################
{"success":true}
$x_1{b}//= 1
($x_1{'b'} //= 1);
($x_1{'b'} //= 1)
#######################################################################
{"success":true}
defined $x_1
defined($x_1);
defined($x_1)
#######################################################################
{"success":true}
return undef
(return ((undef)));
return((undef))
#######################################################################
{"success":true}
scalar @$x_1
scalar(@$x_1);
scalar(@$x_1)
#######################################################################
{"success":true}
$x_1 =~ /^__/
($x_1 =~ /^__/);
($x_1 =~ /^__/)
#######################################################################
{"success":true}
$x_1 cmp $x_2
($x_1 cmp $x_2);
($x_1 cmp $x_2)
#######################################################################
{"success":false}
$x_1->($x_2) 
&$x_1($x_2);
$x_1->($x_2)
#######################################################################
{"success":true}
$x_1->[$x_2] 
$x_1->[$x_2];
$x_1->[$x_2]
#######################################################################
{"success":true}
$x_1->message
$x_1->message;
$x_1->message
#######################################################################
{"success":true}
$x_1->{$x_2} 
$x_1->{$x_2};
$x_1->{$x_2}
#######################################################################
{"success":true}
$x_1->{b}= []
($x_1->{'b'} = []);
($x_1->{'b'} = [])
#######################################################################
{"success":true}
$x_1{b}//= []
($x_1{'b'} //= []);
($x_1{'b'} //= [])
#######################################################################
{"success":true}
$x_1{b}//= {}
($x_1{'b'} //= {});
($x_1{'b'} //= {})
#######################################################################
{"success":false}
func_1 b=> !1
func_1('b', (!1));
func_1('b'=>!(1))
#######################################################################
{"success":true}
length($x_1) 
length($x_1);
length($x_1)
#######################################################################
{"success":true}
ref $x_1->{b}
ref($x_1->{'b'});
ref($x_1->{'b'})
#######################################################################
{"success":false}
return func_1
(return (func_1()));
return(func_1)
#######################################################################
{"success":true}
return undef 
(return ((undef)));
return((undef))
#######################################################################
{"success":false}
$x_1 eq func_1
($x_1 eq func_1());
($x_1 eq func_1)
#######################################################################
{"success":false}
$x_1 || ! $x_2
($x_1 or not($x_2));
($x_1 || !($x_2))
#######################################################################
{"success":false}
$x_1->( $x_2 )
&$x_1($x_2);
$x_1->( $x_2)
#######################################################################
{"success":false}
$x_1->("$x_i")
&$x_1("$x_i");
$x_1->("$x_i")
#######################################################################
{"success":true}
$x_1->{b}// []
($x_1->{'b'} // []);
($x_1->{'b'} // [])
#######################################################################
{"success":true}
$x_1->{b}// {}
($x_1->{'b'} // {});
($x_1->{'b'} // {})
#######################################################################
{"success":false}
$x_1{b}= \$x_2
($x_1{'b'} = (\$x_2));
($x_1{'b'} = \($x_2))
#######################################################################
{"success":false}
0.. $#{ $x_1} 
(0 .. $#{$x_1;});
(0 .. $#({ $x_1}))
#######################################################################
{"success":false}
func_1 b=> !!1
func_1('b', 1);
func_1('b'=>!(!(1)))
#######################################################################
{"success":false}
func_2::func_1
'func_2::func_1'
func_2::func_1
#######################################################################
{"success":true}
lc $x_1 eq 'c'
(lc($x_1) eq 'c');
(lc($x_1) eq 'c')
#######################################################################
{"success":false}
return !! $x_1
(return ((!(!$x_1))));
return(!(!($x_1)))
#######################################################################
{"success":false}
return \func_1
(return (\(func_1())));
return(\(func_1))
#######################################################################
{"success":false}
return func_1 
(return (func_1()));
return(func_1)
#######################################################################
{"success":false}
$x_1->("$x_i") 
&$x_1("$x_i");
$x_1->("$x_i")
#######################################################################
{"success":true}
$x_1->[ $x_2 ] 
$x_1->[$x_2];
$x_1->[ $x_2]
#######################################################################
{"success":true}
$x_1->{'c'} + 1
($x_1->{'c'} + 1);
($x_1->{'c'} + 1)
#######################################################################
{"success":true}
$x_1->{b}// 'c'
($x_1->{'b'} // 'c')
($x_1->{'b'} // 'c')
#######################################################################
{"success":true}
$x_1->{b}{$x_2}
$x_1->{'b'}{$x_2};
$x_1->{'b'}{$x_2}
#######################################################################
{"success":false}
0.. $#{ $x_1 } 
(0 .. $#{$x_1;});
(0 .. $#({ $x_1}))
#######################################################################
{"success":true}
func_1 ( $x_1 )
func_1($x_1);
func_1( $x_1)
#######################################################################
{"success":false}
func_1 qw[modf]
func_1('modf');
func_1(qw[modf])
#######################################################################
{"success":true}
func_1( $x_1 ) 
func_1($x_1);
func_1( $x_1)
#######################################################################
{"success":false}
keys %{ $x_1 } 
keys(%{$x_1;});
keys(%{ $x_1})
#######################################################################
{"success":true}
push $x_1, $x_2
push($x_1, $x_2);
push($x_1,$x_2)
#######################################################################
{"success":true}
push @$x_1, 'c'
push(@$x_1, 'c');
push(@$x_1,'c')
#######################################################################
{"success":true}
ref $x_1 eq 'c'
(ref($x_1) eq 'c');
(ref($x_1) eq 'c')
#######################################################################
{"success":true}
ref $x_1 ne 'c'
(ref($x_1) ne 'c');
(ref($x_1) ne 'c')
#######################################################################
{"success":true}
return ref $x_1
(return (ref($x_1)));
return(ref($x_1))
#######################################################################
{"success":true}
"$x_i".$x_1->{b}
("$x_i" . $x_1->{'b'});
("$x_i" . $x_1->{'b'})
#######################################################################
{"success":true}
$x_1 = [ $x_1 ] 
($x_1 = [$x_1]);
($x_1 = [ $x_1])
#######################################################################
{"success":true}
$x_1->{$x_2} = 1
($x_1->{$x_2} = 1);
($x_1->{$x_2} = 1)
#######################################################################
{"success":true}
$x_1->{b}|| $x_2
($x_1->{'b'} or $x_2);
($x_1->{'b'} || $x_2)
#######################################################################
{"success":true}
$x_1{ $x_2 } = 1
($x_1{$x_2} = 1);
($x_1{ $x_2} = 1)
#######################################################################
{"success":true}
defined ( $x_1 )
defined($x_1);
defined( $x_1)
#######################################################################
{"success":false}
exists $x_1->{b}
exists $x_1->{'b'};
exists($x_1->{'b'})
#######################################################################
{"success":true}
func_1 ( $x_1 ) 
func_1($x_1);
func_1( $x_1)
#######################################################################
{"success":true}
return $x_1->{b}
(return ($x_1->{'b'}));
return($x_1->{'b'})
#######################################################################
{"success":false}
scalar @{ $x_1 }
scalar(@{$x_1;});
scalar(@{ $x_1})
#######################################################################
{"success":false}
$x_1 < @{ $x_2 } 
($x_1 < @{$x_2;});
($x_1 < @{ $x_2})
#######################################################################
{"success":true}
$x_1 =~ /$regexp/
($x_1 =~ /$regexp/);
($x_1 =~ /$regexp/)
#######################################################################
{"success":true}
$x_1{b}// $x_1{b}
($x_1{'b'} // $x_1{'b'});
($x_1{'b'} // $x_1{'b'})
#######################################################################
{"success":false}
%{ $x_1 } <= $x_2
(%{$x_1;} <= $x_2);
(%{ $x_1} <= $x_2)
#######################################################################
{"success":false}
%{ $x_1 } >= $x_2
(%{$x_1;} >= $x_2);
(%{ $x_1} >= $x_2)
#######################################################################
{"success":true}
defined $x_1->{b}
defined($x_1->{'b'});
defined($x_1->{'b'})
#######################################################################
{"success":false}
exists $x_1{$x_2}
exists $x_1{$x_2};
exists($x_1{$x_2})
#######################################################################
{"success":true}
int($x_1) == $x_1
(int($x_1) == $x_1);
(int($x_1) == $x_1)
#######################################################################
{"success":false}
keys @{$x_1->{b}}
keys(@{$$x_1{'b'};});
keys(@{$x_1->{'b'}})
#######################################################################
{"success":true}
ref $x_1 eq ref 1
(ref($x_1) eq ref(1));
(ref($x_1) eq ref(1))
#######################################################################
{"success":false}
scalar @{ $x_1 } 
scalar(@{$x_1;});
scalar(@{ $x_1})
#######################################################################
{"success":true}
$x_1 / $x_2->{'c'}
($x_1 / $x_2->{'c'});
($x_1 / $x_2->{'c'})
#######################################################################
{"success":true}
$x_1 < $x_2->{'c'}
($x_1 < $x_2->{'c'});
($x_1 < $x_2->{'c'})
#######################################################################
{"success":true}
$x_1 =~ /$pattern/
($x_1 =~ /$pattern/);
($x_1 =~ /$pattern/)
#######################################################################
{"success":true}
$x_1 > $x_2->{'c'}
($x_1 > $x_2->{'c'});
($x_1 > $x_2->{'c'})
#######################################################################
{"success":true}
$x_1->func_1($x_2)
$x_1->func_1($x_2);
$x_1->func_1($x_2)
#######################################################################
{"success":false}
$x_1{b}//= \func_1
($x_1{'b'} //= \(func_1()));
($x_1{'b'} //= \(func_1))
#######################################################################
{"success":false}
each @{$x_1->{b}} 
each(@{$$x_1{'b'};});
each(@{$x_1->{'b'}})
#######################################################################
{"success":false}
exists $x_1->{'c'}
exists $x_1->{'c'};
exists($x_1->{'c'})
#######################################################################
{"success":false}
exists $x_1{$x_2} 
exists $x_1{$x_2};
exists($x_1{$x_2})
#######################################################################
{"success":false}
func_1 b=> 0func_2

func_1('b'=>0func_2)
#######################################################################
{"success":false}
func_1 b=> \func_2
func_1('b', \(func_2()));
func_1('b'=>\(func_2))
#######################################################################
{"success":true}
func_1($x_1, $x_2)
func_1($x_1, $x_2);
func_1($x_1,$x_2)
#######################################################################
{"success":true}
ref $x_1 eq ref []
(ref($x_1) eq ref([]));
(ref($x_1) eq ref([]))
#######################################################################
{"success":false}
ref $x_1 eq ref {}
(ref($x_1) eq ref({}));
(ref($x_1) eq ref{})
#######################################################################
{"success":true}
return $x_1->{'c'}
(return ($x_1->{'c'}));
return($x_1->{'c'})
#######################################################################
{"success":true}
return (ref $x_1) 
(return (ref($x_1)));
return(ref($x_1))
#######################################################################
{"success":false}
scalar keys func_1
scalar(keys(func_1()));
scalar(keys(func_1))
#######################################################################
{"success":true}
"$x_i". $x_1->{'c'}
("$x_i" . $x_1->{'c'});
("$x_i" . $x_1->{'c'})
#######################################################################
{"success":true}
$x_1 <= $x_2->{'c'}
($x_1 <= $x_2->{'c'});
($x_1 <= $x_2->{'c'})
#######################################################################
{"success":true}
$x_1 = $x_2->[$x_3]
($x_1 = $x_2->[$x_3]);
($x_1 = $x_2->[$x_3])
#######################################################################
{"success":true}
$x_1 = $x_2->{$x_3}
($x_1 = $x_2->{$x_3});
($x_1 = $x_2->{$x_3})
#######################################################################
{"success":true}
$x_1 = $x_2->{'c'} 
($x_1 = $x_2->{'c'});
($x_1 = $x_2->{'c'})
#######################################################################
{"success":true}
$x_1 >= $x_2->{'c'}
($x_1 >= $x_2->{'c'});
($x_1 >= $x_2->{'c'})
#######################################################################
{"success":true}
$x_1 ge $x_2->{'c'}
($x_1 ge $x_2->{'c'});
($x_1 ge $x_2->{'c'})
#######################################################################
{"success":true}
$x_1 gt $x_2->{'c'}
($x_1 gt $x_2->{'c'});
($x_1 gt $x_2->{'c'})
#######################################################################
{"success":true}
$x_1 le $x_2->{'c'}
($x_1 le $x_2->{'c'});
($x_1 le $x_2->{'c'})
#######################################################################
{"success":true}
$x_1 lt $x_2->{'c'}
($x_1 lt $x_2->{'c'});
($x_1 lt $x_2->{'c'})
#######################################################################
{"success":true}
$x_1->{b}|| $x_2{b}
($x_1->{'b'} or $x_2{'b'});
($x_1->{'b'} || $x_2{'b'})
#######################################################################
{"success":true}
defined $x_1->{'c'}
defined($x_1->{'c'});
defined($x_1->{'c'})
#######################################################################
{"success":true}
func_1($x_1 / $x_2)
func_1(($x_1 / $x_2));
func_1(($x_1 / $x_2))
#######################################################################
{"success":true}
lc $x_1 cmp lc $x_2
(lc($x_1) cmp lc($x_2));
(lc($x_1) cmp lc($x_2))
#######################################################################
{"success":true}
length($x_1) < $x_2
(length($x_1) < $x_2);
(length($x_1) < $x_2)
#######################################################################
{"success":true}
length($x_1) > $x_2
(length($x_1) > $x_2);
(length($x_1) > $x_2)
#######################################################################
{"success":false}
local $x_1->{b}= []
(local $x_1->{'b'} = []);
local(($x_1->{'b'} = []))
#######################################################################
{"success":true}
ref $x_1 eq ref 'c'
(ref($x_1) eq ref('c'));
(ref($x_1) eq ref('c'))
#######################################################################
{"success":true}
ref $x_1 eq ref [] 
(ref($x_1) eq ref([]));
(ref($x_1) eq ref([]))
#######################################################################
{"success":false}
ref $x_1 eq ref {} 
(ref($x_1) eq ref({}));
(ref($x_1) eq ref{})
#######################################################################
{"success":false}
return !! $x_1->{b}
(return ((!(!$x_1->{'b'}))));
return(!(!($x_1->{'b'})))
#######################################################################
{"success":true}
return $x_1 == $x_2
(return (($x_1 == $x_2)));
return(($x_1 == $x_2))
#######################################################################
{"success":true}
return $x_1 eq $x_2
(return (($x_1 eq $x_2)));
return(($x_1 eq $x_2))
#######################################################################
{"success":false}
sort @{ $x_1->{b}} 
sort(@{$x_1->{'b'};});
sort(@{ $x_1->{'b'}})
#######################################################################
{"success":false}
$x_1 = !$x_2->{'c'} 
($x_1 = (!$x_2->{'c'}));
($x_1 = !($x_2->{'c'}))
#######################################################################
{"success":true}
$x_1 = func_1($x_1) 
($x_1 = func_1($x_1));
($x_1 = func_1($x_1))
#######################################################################
{"success":true}
$x_1 and $x_2->{'c'}
($x_1 and $x_2->{'c'});
($x_1 and $x_2->{'c'})
#######################################################################
{"success":true}
$x_1 or $x_2 or $x_3
(($x_1 or $x_2) or $x_3);
(($x_1 or $x_2) or $x_3)
#######################################################################
{"success":false}
$x_1->("$x_i". $x_2)
&$x_1(("$x_i" . $x_2));
$x_1->(("$x_i" . $x_2))
#######################################################################
{"success":true}
$x_1->func_1( $x_2 )
$x_1->func_1($x_2);
$x_1->func_1( $x_2)
#######################################################################
{"success":true}
defined $x_1->[$x_2]
defined($x_1->[$x_2]);
defined($x_1->[$x_2])
#######################################################################
{"success":true}
defined $x_1->{$x_2}
defined($x_1->{$x_2});
defined($x_1->{$x_2})
#######################################################################
{"success":true}
defined $x_1->{'c'} 
defined($x_1->{'c'});
defined($x_1->{'c'})
#######################################################################
{"success":false}
exists $x_1->{$x_2} 
exists $x_1->{$x_2};
exists($x_1->{$x_2})
#######################################################################
{"success":false}
func_1 'c'=> \func_2
func_1('c', \(func_2()));
func_1('c'=>\(func_2))
#######################################################################
{"success":false}
func_1 'c'=> sub {;}
func_1('c', sub {      } );
func_1('c'=>sub {;})
#######################################################################
{"success":true}
ref $x_1 ne ref $x_2
(ref($x_1) ne ref($x_2));
(ref($x_1) ne ref($x_2))
#######################################################################
{"success":true}
return $x_1->{b}|| 0
(return (($x_1->{'b'} || 0)));
return(($x_1->{'b'} || 0))
#######################################################################
{"success":false}
return @{ $x_1->{b}}
(return (@{$x_1->{'b'};}));
return(@{ $x_1->{'b'}})
#######################################################################
{"success":false}
scalar @{ $x_1 } > 1
(scalar(@{$x_1;}) > 1);
(scalar(@{ $x_1}) > 1)
#######################################################################
{"success":false}
sort keys %{ $x_1 } 
sort(keys(%{$x_1;}));
sort(keys(%{ $x_1}))
#######################################################################
{"success":false}
split ( $x_1, $x_2 )
split(/$x_1/, $x_2, 0);
split( $x_1,$x_2)
#######################################################################
{"success":true}
$x_1 //= $x_2->func_1
($x_1 //= $x_2->func_1);
($x_1 //= $x_2->func_1)
#######################################################################
{"success":true}
$x_1 =~ /^\-?[0-9]+$/
($x_1 =~ /^\-?[0-9]+$/);
($x_1 =~ /^\-?[0-9]+$/)
#######################################################################
{"success":true}
$x_1->func_1( $x_2 ) 
$x_1->func_1($x_2);
$x_1->func_1( $x_2)
#######################################################################
{"success":true}
$x_1->{b}// $x_2->{b}
($x_1->{'b'} // $x_2->{'b'});
($x_1->{'b'} // $x_2->{'b'})
#######################################################################
{"success":true}
$x_1::func_2::func_1 
$x_1::func_2::func_1;
$x_1::func_2::func_1
#######################################################################
{"success":false}
( b=> $x_1 ) x!! $x_1
((('b', $x_1)) x (!(!$x_1)));
(( 'b'=>$x_1) x !(!($x_1)))
#######################################################################
{"success":true}
defined $x_1->[$x_2] 
defined($x_1->[$x_2]);
defined($x_1->[$x_2])
#######################################################################
{"success":true}
defined $x_1->{$x_2} 
defined($x_1->{$x_2});
defined($x_1->{$x_2})
#######################################################################
{"success":true}
join ( "$x_i", $x_1 )
join("$x_i", $x_1);
join( "$x_i",$x_1)
#######################################################################
{"success":false}
push @$x_1, @{ $x_2 }
push(@$x_1, @{$x_2;});
push(@$x_1,@{ $x_2})
#######################################################################
{"success":false}
!$x_1 and defined $x_2
($x_1 or defined($x_2));
(!($x_1) and defined($x_2))
#######################################################################
{"success":true}
$x_1->{b}{ $x_2->{b}} 
$x_1->{'b'}{$x_2->{'b'}};
$x_1->{'b'}{ $x_2->{'b'}}
#######################################################################
{"success":true}
$x_1{b}// $x_2->func_1
($x_1{'b'} // $x_2->func_1);
($x_1{'b'} // $x_2->func_1)
#######################################################################
{"success":false}
func_1 qw( vars subs )
func_1(('vars', 'subs'));
func_1(qw( vars subs ))
#######################################################################
{"success":false}
func_3::func_2->func_1
'func_3::func_2'->func_1;
func_3::func_2->func_1
#######################################################################
{"success":false}
func_3::func_2::func_1
'func_3::func_2::func_1'
func_3::func_2::func_1
#######################################################################
{"success":false}
join( 'c', @{ $x_1 } )
join('c', @{$x_1;});
join( 'c',@{ $x_1})
#######################################################################
{"success":true}
$x_1 == 1&& $x_2 < $x_3
(($x_1 == 1) and ($x_2 < $x_3));
(($x_1 == 1) && ($x_2 < $x_3))
#######################################################################
{"success":true}
$x_1 or ref $x_2 ne 'c'
($x_1 or (ref($x_2) ne 'c'));
($x_1 or (ref($x_2) ne 'c'))
#######################################################################
{"success":true}
$x_1->func_1('c', $x_2)
$x_1->func_1('c', $x_2);
$x_1->func_1('c',$x_2)
#######################################################################
{"success":false}
exists $x_1->{b}{$x_2} 
exists $x_1->{'b'}{$x_2};
exists($x_1->{'b'}{$x_2})
#######################################################################
{"success":false}
map { "$x_i"} @{ $x_1 }
map({"$x_i";} @{$x_1;});
map({ "$x_i"}@{ $x_1})
#######################################################################
{"success":false}
push @{$x_1->{b}}, $x_2
push(@{$$x_1{'b'};}, $x_2);
push(@{$x_1->{'b'}},$x_2)
#######################################################################
{"success":true}
ref $x_1->{b}eq ref [] 
(ref($x_1->{'b'}) eq ref([]));
(ref($x_1->{'b'}) eq ref([]))
#######################################################################
{"success":false}
ref $x_1->{b}eq ref {} 
(ref($x_1->{'b'}) eq ref({}));
(ref($x_1->{'b'}) eq ref{})
#######################################################################
{"success":true}
return bless $x_1, $x_2
(return (bless($x_1, $x_2)));
return(bless($x_1,$x_2))
#######################################################################
{"success":true}
$x_1->func_1($x_2, $x_3)
$x_1->func_1($x_2, $x_3);
$x_1->func_1($x_2,$x_3)
#######################################################################
{"success":true}
$x_1->func_1('c', $x_2) 
$x_1->func_1('c', $x_2);
$x_1->func_1('c',$x_2)
#######################################################################
{"success":false}
$x_1->{ $x_2->[ $x_3 ] }
$$x_1{$x_2->[$x_3]};
$x_1->{ $x_2->[ $x_3]}
#######################################################################
{"success":true}
$x_1->{b}// $x_2->func_1
($x_1->{'b'} // $x_2->func_1);
($x_1->{'b'} // $x_2->func_1)
#######################################################################
{"success":true}
func_1($x_1) && $x_1 > 0
(func_1($x_1) and ($x_1 > 0));
(func_1($x_1) && ($x_1 > 0))
#######################################################################
{"success":false}
func_2::func_1 qw[match]

func_2::func_1(qw[match])
#######################################################################
{"success":false}
return bless \$x_1, $x_2
(return (bless((\$x_1), $x_2)));
return(bless(\($x_1),$x_2))
#######################################################################
{"success":false}
$x_1->("$x_i".$x_2->{b}) 
&$x_1(("$x_i" . $x_2->{'b'}));
$x_1->(("$x_i" . $x_2->{'b'}))
#######################################################################
{"success":true}
$x_1->func_1($x_2)."$x_i"
($x_1->func_1($x_2) . "$x_i");
($x_1->func_1($x_2) . "$x_i")
#######################################################################
{"success":true}
return $x_1->func_1($x_2)
(return ($x_1->func_1($x_2)));
return($x_1->func_1($x_2))
#######################################################################
{"success":true}
return (ref $x_1 eq 'c') 
(return ((ref($x_1) eq 'c')));
return((ref($x_1) eq 'c'))
#######################################################################
{"success":true}
return lc $x_1 eq lc $x_2
(return ((lc($x_1) eq lc($x_2))));
return((lc($x_1) eq lc($x_2)))
#######################################################################
{"success":false}
defined $x_1 && @{ $x_1 } 
(defined($x_1) and @{$x_1;});
(defined($x_1) && @{ $x_1})
#######################################################################
{"success":true}
func_1($x_1 / $x_2->{'c'})
func_1(($x_1 / $x_2->{'c'}));
func_1(($x_1 / $x_2->{'c'}))
#######################################################################
{"success":true}
func_1([$x_1],{b=>1,b=>1})
func_1([$x_1], {'b', 1, 'b', 1});
func_1([$x_1],{'b'=>1,'b'=>1})
#######################################################################
{"success":false}
func_2::func_1 qw[blessed]

func_2::func_1(qw[blessed])
#######################################################################
{"success":false}
return bless \func_1, $x_1
(return (bless(\(func_1()), $x_1)));
return(bless(\(func_1),$x_1))
#######################################################################
{"success":true}
$x_1 =~ /^\d+$/ && $x_1 > 0
(($x_1 =~ /^\d+$/) and ($x_1 > 0));
(($x_1 =~ /^\d+$/) && ($x_1 > 0))
#######################################################################
{"success":true}
$x_1 and ref $x_2 ne ref []
($x_1 and (ref($x_2) ne ref([])));
($x_1 and (ref($x_2) ne ref([])))
#######################################################################
{"success":true}
func_1([$x_1],{b=>1,b=>1}) 
func_1([$x_1], {'b', 1, 'b', 1});
func_1([$x_1],{'b'=>1,'b'=>1})
#######################################################################
{"success":true}
return func_1( $x_1, $x_2 )
(return (func_1($x_1, $x_2)));
return(func_1( $x_1,$x_2))
#######################################################################
{"success":true}
"$x_i". $x_1->{'c'} . "$x_i"
(("$x_i" . $x_1->{'c'}) . "$x_i");
(("$x_i" . $x_1->{'c'}) . "$x_i")
#######################################################################
{"success":false}
$#{ $x_1 } + 1.. $#{ $x_2 } 
(($#{$x_1;} + 1) .. $#{$x_2;});
(($#({ $x_1}) + 1) .. $#({ $x_2}))
#######################################################################
{"success":false}
$x_1->("$x_i", $x_2->{$x_3})
&$x_1("$x_i", $x_2->{$x_3});
$x_1->("$x_i",$x_2->{$x_3})
#######################################################################
{"success":false}
$x_1->("$x_i". $x_2->{'c'}) 
&$x_1(("$x_i" . $x_2->{'c'}));
$x_1->(("$x_i" . $x_2->{'c'}))
#######################################################################
{"success":true}
$x_1->{$x_2} = $x_3->{$x_2} 
($x_1->{$x_2} = $x_3->{$x_2});
($x_1->{$x_2} = $x_3->{$x_2})
#######################################################################
{"success":false}
( scalar @{ $x_1 } ) <= $x_2
(scalar(@{$x_1;}) <= $x_2);
(( scalar(@{ $x_1})) <= $x_2)
#######################################################################
{"success":false}
( scalar @{ $x_1 } ) >= $x_2
(scalar(@{$x_1;}) >= $x_2);
(( scalar(@{ $x_1})) >= $x_2)
#######################################################################
{"success":true}
defined $x_1 != defined $x_2
(defined($x_1) != defined($x_2));
(defined($x_1) != defined($x_2))
#######################################################################
{"success":false}
defined $x_1 && $x_1 =~ $x_2
(defined($x_1) and ($x_1 =~ /$x_2/));
(defined($x_1) && ($x_1 =~ $x_2))
#######################################################################
{"success":false}
return map {;}@{$x_1->{'c'}}
(return (map({();} @{$$x_1{'c'};})));
return(map({;}@{$x_1->{'c'}}))
#######################################################################
{"success":true}
"$x_i". join ( "$x_i", $x_1 )
("$x_i" . join("$x_i", $x_1));
("$x_i" . join( "$x_i",$x_1))
#######################################################################
{"success":false}
$x_1 .= $x_1 ? "$x_i": "$x_i"
($x_1 .= ($x_1 ? "$x_i" : "$x_i"));
($x_1 .= $x_1?"$x_i":"$x_i")
#######################################################################
{"success":true}
exists $x_1->{b}{ $x_2->{b}} 
exists($x_1->{'b'}{$x_2->{'b'}});
exists($x_1->{'b'}{ $x_2->{'b'}})
#######################################################################
{"success":false}
join "$x_i", @{ $x_1->{'c'} }
join("$x_i", @{$x_1->{'c'};});
join("$x_i",@{ $x_1->{'c'}})
#######################################################################
{"success":false}
scalar keys %{ $x_1 } <= $x_2
(scalar(keys(%{$x_1;})) <= $x_2);
scalar(keys((%{ $x_1} <= $x_2)))
#######################################################################
{"success":false}
scalar keys %{ $x_1 } >= $x_2
(scalar(keys(%{$x_1;})) >= $x_2);
scalar(keys((%{ $x_1} >= $x_2)))
#######################################################################
{"success":false}
$x_1 = exists ( $x_2->[$x_3] )
($x_1 = exists $x_2->[$x_3]);
($x_1 = exists( $x_2->[$x_3]))
#######################################################################
{"success":false}
$x_1 = exists ( $x_2->{$x_3} )
($x_1 = exists $x_2->{$x_3});
($x_1 = exists( $x_2->{$x_3}))
#######################################################################
{"success":false}
func_4::func_3::func_2::func_1
'func_4::func_3::func_2::func_1'
func_4::func_3::func_2::func_1
#######################################################################
{"success":false}
local $x_1::func_2::func_1 = 1
(local $x_1::func_2::func_1 = 1);
local(($x_1::func_2::func_1 = 1))
#######################################################################
{"success":false}
return $x_1->func_1( func_2, )
(return ($x_1->func_1(func_2())));
return($x_1->func_1( func_2))
#######################################################################
{"success":true}
return ref $x_1->{b}eq ref [] 
(return ((ref($x_1->{'b'}) eq ref([]))));
return((ref($x_1->{'b'}) eq ref([])))
#######################################################################
{"success":true}
return { b=> $x_1, b=> $x_2, }
(return ({'b', $x_1, 'b', $x_2}));
return({ 'b'=>$x_1,'b'=>$x_2})
#######################################################################
{"success":false}
join( 'c', sort @{ $x_1->{b}} )
join('c', sort(@{$x_1->{'b'};}));
join( 'c',sort(@{ $x_1->{'b'}}))
#######################################################################
{"success":true}
ref($x_1) and ref($x_1) eq $x_2
(ref($x_1) and (ref($x_1) eq $x_2));
(ref($x_1) and (ref($x_1) eq $x_2))
#######################################################################
{"success":true}
return $x_1->func_1($x_2, $x_3)
(return ($x_1->func_1($x_2, $x_3)));
return($x_1->func_1($x_2,$x_3))
#######################################################################
{"success":true}
return ($x_1 =~ /^\-?[0-9]+$/) 
(return (($x_1 =~ /^\-?[0-9]+$/)));
return(($x_1 =~ /^\-?[0-9]+$/))
#######################################################################
{"success":true}
$x_1 =~ /^\-?[0-9]+(\.[0-9]*)?$/
($x_1 =~ /^\-?[0-9]+(\.[0-9]*)?$/);
($x_1 =~ /^\-?[0-9]+(\.[0-9]*)?$/)
#######################################################################
{"success":false}
$x_1->($x_2->func_1($x_3)."$x_i")
&$x_1(($x_2->func_1($x_3) . "$x_i"));
$x_1->(($x_2->func_1($x_3) . "$x_i"))
#######################################################################
{"success":true}
$x_1->func_1( $x_2, $x_3, $x_4 ) 
$x_1->func_1($x_2, $x_3, $x_4);
$x_1->func_1( $x_2,$x_3,$x_4)
#######################################################################
{"success":false}
$x_1{b}//= func_3::func_2->func_1
($x_1{'b'} //= 'func_3::func_2'->func_1);
($x_1{'b'} //= func_3::func_2->func_1)
#######################################################################
{"success":false}
exists $x_1->{b}|| exists $x_2{b}
(exists $x_1->{'b'} or exists $x_2{'b'});
(exists($x_1->{'b'}) || exists($x_2{'b'}))
#######################################################################
{"success":true}
func_1($x_1) && $x_1->func_2('c')
(func_1($x_1) and $x_1->func_2('c'));
(func_1($x_1) && $x_1->func_2('c'))
#######################################################################
{"success":true}
return $x_1, $x_2->func_1( $x_3 )
(return ($x_1, $x_2->func_1($x_3)));
return($x_1,$x_2->func_1( $x_3))
#######################################################################
{"success":false}
"$x_i". ($x_1->{'c'} + 1) . "$x_i"
(("$x_i" . ($x_1->{'c'} + 1)) . "$x_i");
(("$x_i" . (($x_1->{'c'} + 1))) . "$x_i")
#######################################################################
{"success":true}
$x_1{ func_1([$x_2],{b=>1,b=>1}) }
$x_1{func_1([$x_2], {'b', 1, 'b', 1})};
$x_1{ func_1([$x_2],{'b'=>1,'b'=>1})}
#######################################################################
{"success":true}
$x_1 && defined $x_2 && $x_2 eq 'c'
(($x_1 and defined($x_2)) and ($x_2 eq 'c'));
(($x_1 && defined($x_2)) && ($x_2 eq 'c'))
#######################################################################
{"success":false}
%{ $x_1 } != scalar keys %{ $x_2 } 
(%{$x_1;} != scalar(keys(%{$x_2;})));
(%{ $x_1} != scalar(keys(%{ $x_2})))
#######################################################################
{"success":false}
exists $x_1->{b}|| exists $x_1->{b}
(exists $x_1->{'b'} or exists $x_1->{'b'});
(exists($x_1->{'b'}) || exists($x_1->{'b'}))
#######################################################################
{"success":true}
func_1($x_1) and $x_1->func_2($x_2)
(func_1($x_1) and $x_1->func_2($x_2));
(func_1($x_1) and $x_1->func_2($x_2))
#######################################################################
{"success":true}
ref $x_1 =~ /^JSON::(.*)::Boolean$/
ref(($x_1 =~ /^JSON::(.*)::Boolean$/));
ref(($x_1 =~ /^JSON::(.*)::Boolean$/))
#######################################################################
{"success":false}
!!$x_1 or !!$x_2 or not defined $x_1
not((((!$x_1) && (!$x_2)) && defined($x_1)));
((!(!($x_1)) or !(!($x_2))) or not(defined($x_1)))
#######################################################################
{"success":false}
$x_1->("$x_i". $x_2->{'c'} . "$x_i")
&$x_1((("$x_i" . $x_2->{'c'}) . "$x_i"));
$x_1->((("$x_i" . $x_2->{'c'}) . "$x_i"))
#######################################################################
{"success":false}
$x_1->("$x_i". $x_2->{'c'}) . "$x_i"
(&$x_1(("$x_i" . $x_2->{'c'})) . "$x_i");
($x_1->(("$x_i" . $x_2->{'c'})) . "$x_i")
#######################################################################
{"success":false}
func_2::func_1 qw(looks_like_number)

func_2::func_1(qw(looks_like_number))
#######################################################################
{"success":false}
scalar(keys func_1) == scalar(@$x_1)
(scalar(keys(func_1())) == scalar(@$x_1));
(scalar(keys(func_1)) == scalar(@$x_1))
#######################################################################
{"success":false}
$x_1->("$x_i". $x_2->{'c'} . "$x_i") 
&$x_1((("$x_i" . $x_2->{'c'}) . "$x_i"));
$x_1->((("$x_i" . $x_2->{'c'}) . "$x_i"))
#######################################################################
{"success":true}
defined $x_1 and defined $x_1->{$x_2}
(defined($x_1) and defined($x_1->{$x_2}));
(defined($x_1) and defined($x_1->{$x_2}))
#######################################################################
{"success":false}
map { func_1 ( $x_1 ) => 1} @{ $x_2 }
map({(func_1($x_1), 1);} @{$x_2;});
map({ func_1( $x_1)=>1}@{ $x_2})
#######################################################################
{"success":true}
return $x_1->func_1($x_2, $x_3, $x_4)
(return ($x_1->func_1($x_2, $x_3, $x_4)));
return($x_1->func_1($x_2,$x_3,$x_4))
#######################################################################
{"success":false}
scalar @{ $x_1 } != scalar @{ $x_2 } 
(scalar(@{$x_1;}) != scalar(@{$x_2;}));
(scalar(@{ $x_1}) != scalar(@{ $x_2}))
#######################################################################
{"success":false}
func_5::func_4::func_3::func_2->func_1
'func_5::func_4::func_3::func_2'->func_1;
func_5::func_4::func_3::func_2->func_1
#######################################################################
{"success":false}
grep { ref $x_1 eq ref 'c'} @{ $x_2 } 
grep({(ref($x_1) eq ref('c'));} @{$x_2;});
grep({ (ref($x_1) eq ref('c'))}@{ $x_2})
#######################################################################
{"success":false}
grep { ref $x_1 eq ref [] } @{ $x_2 } 
grep({(ref($x_1) eq ref([]));} @{$x_2;});
grep({ (ref($x_1) eq ref([]))}@{ $x_2})
#######################################################################
{"success":true}
ref $x_1 eq 'c'and $$x_1==0|| $$x_1==1
((ref($x_1) eq 'c') and (($$x_1 == 0) || ($$x_1 == 1)));
((ref($x_1) eq 'c') and (($$x_1 == 0) || ($$x_1 == 1)))
#######################################################################
{"success":false}
sort { $x_1 cmp $x_2 } keys %{ $x_3 } 
sort {($x_1 cmp $x_2);} keys(%{$x_3;});
sort({ ($x_1 cmp $x_2)}keys(%{ $x_3}))
#######################################################################
{"success":true}
$x_1->{'c'} and $x_2->func_1('c', $x_3)
($x_1->{'c'} and $x_2->func_1('c', $x_3));
($x_1->{'c'} and $x_2->func_1('c',$x_3))
#######################################################################
{"success":true}
$x_1->{'c'}->func_1($x_2, $x_1->{'c'}) 
$x_1->{'c'}->func_1($x_2, $x_1->{'c'});
$x_1->{'c'}->func_1($x_2,$x_1->{'c'})
#######################################################################
{"success":true}
defined $x_1->{'c'} and not $x_1->{'c'}
(defined($x_1->{'c'}) and not($x_1->{'c'}));
(defined($x_1->{'c'}) and not($x_1->{'c'}))
#######################################################################
{"success":false}
func_5::func_4::func_3::func_2->func_1 
'func_5::func_4::func_3::func_2'->func_1;
func_5::func_4::func_3::func_2->func_1
#######################################################################
{"success":true}
ref $x_1 eq 'c'and $$x_1==0and $$x_1==1
(((ref($x_1) eq 'c') and ($$x_1 == 0)) and ($$x_1 == 1));
(((ref($x_1) eq 'c') and ($$x_1 == 0)) and ($$x_1 == 1))
#######################################################################
{"success":false}
return $x_1->func_1($x_2, $x_3, func_2)
(return ($x_1->func_1($x_2, $x_3, func_2())));
return($x_1->func_1($x_2,$x_3,func_2))
#######################################################################
{"success":false}
return bless { func_1, b=> $x_1 }, $x_2
(return (bless({func_1(), 'b', $x_1}, $x_2)));
return(bless({ func_1,'b'=>$x_1},$x_2))
#######################################################################
{"success":false}
exists $x_1->{$x_2} || $x_3 || $x_4->{b}
((exists $x_1->{$x_2} or $x_3) or $x_4->{'b'});
((exists($x_1->{$x_2}) || $x_3) || $x_4->{'b'})
#######################################################################
{"success":false}
return func_3::func_2->func_1($x_1->{b})
(return ('func_3::func_2'->func_1($x_1->{'b'})));
return(func_3::func_2->func_1($x_1->{'b'}))
#######################################################################
{"success":true}
defined $x_1 and not defined $x_2->{$x_1}
(defined($x_1) and not(defined($x_2->{$x_1})));
(defined($x_1) and not(defined($x_2->{$x_1})))
#######################################################################
{"success":true}
$x_1->func_1($x_2, $x_3, $x_4, $x_5, $x_6)
$x_1->func_1($x_2, $x_3, $x_4, $x_5, $x_6);
$x_1->func_1($x_2,$x_3,$x_4,$x_5,$x_6)
#######################################################################
{"success":true}
$x_1->{'c'} and scalar @$x_2 < $x_1->{'c'}
($x_1->{'c'} and (scalar(@$x_2) < $x_1->{'c'}));
($x_1->{'c'} and (scalar(@$x_2) < $x_1->{'c'}))
#######################################################################
{"success":true}
$x_1->{'c'} and scalar @$x_2 > $x_1->{'c'}
($x_1->{'c'} and (scalar(@$x_2) > $x_1->{'c'}));
($x_1->{'c'} and (scalar(@$x_2) > $x_1->{'c'}))
#######################################################################
{"success":false}
( defined $x_1 ) && ( ref $x_1 eq ref 'c')
(defined($x_1) and (ref($x_1) eq ref('c')));
(( defined($x_1)) && ( (ref($x_1) eq ref('c'))))
#######################################################################
{"success":false}
$x_1 && $x_1->{$x_2} && $x_1->{$x_2}->{'c'}
(($x_1 and $x_1->{$x_2}) and $x_1->{$x_2}{'c'});
(($x_1 && $x_1->{$x_2}) && $x_1->{$x_2}->{'c'})
#######################################################################
{"success":true}
$x_1->func_1($x_2, $x_3, $x_4, $x_5, $x_6) 
$x_1->func_1($x_2, $x_3, $x_4, $x_5, $x_6);
$x_1->func_1($x_2,$x_3,$x_4,$x_5,$x_6)
#######################################################################
{"success":true}
$x_1->func_1($x_2, $x_3, $x_4, undef, $x_5)
$x_1->func_1($x_2, $x_3, $x_4, (undef), $x_5);
$x_1->func_1($x_2,$x_3,$x_4,(undef),$x_5)
#######################################################################
{"success":true}
$x_1->func_1($x_2->{'c'}, $x_3, $x_4, $x_5)
$x_1->func_1($x_2->{'c'}, $x_3, $x_4, $x_5);
$x_1->func_1($x_2->{'c'},$x_3,$x_4,$x_5)
#######################################################################
{"success":true}
defined $x_1->{'c'} or defined $x_1->{'c'} 
(defined($x_1->{'c'}) or defined($x_1->{'c'}));
(defined($x_1->{'c'}) or defined($x_1->{'c'}))
#######################################################################
{"success":false}
func_5::func_4::func_3::func_2->func_1($x_1)
'func_5::func_4::func_3::func_2'->func_1($x_1);
func_5::func_4::func_3::func_2->func_1($x_1)
#######################################################################
{"success":false}
ref $x_1 ne 'c'and ($x_2 or ref $x_1 ne 'c')
((ref($x_1) ne 'c') and ($x_2 || (ref($x_1) ne 'c')));
((ref($x_1) ne 'c') and (($x_2 or (ref($x_1) ne 'c'))))
#######################################################################
{"success":false}
sort { lc $x_1 cmp lc $x_2 } keys %{ $x_3 } 
sort {(lc($x_1) cmp lc($x_2));} keys(%{$x_3;});
sort({ (lc($x_1) cmp lc($x_2))}keys(%{ $x_3}))
#######################################################################
{"success":false}
"$x_i". (join "$x_i", @{ $x_1->{'c'} }) . 'c'
(("$x_i" . join("$x_i", @{$x_1->{'c'};})) . 'c');
(("$x_i" . (join("$x_i",@{ $x_1->{'c'}}))) . 'c')
#######################################################################
{"success":false}
( ref $x_1->{b}eq ref [] ) && ( @{$x_1->{b}} )
((ref($x_1->{'b'}) eq ref([])) and @{$x_1->{'b'};});
(( (ref($x_1->{'b'}) eq ref([]))) && ( @{$x_1->{'b'}}))
#######################################################################
{"success":true}
$x_1->func_1($x_2, $x_2->{'c'}, 'c', 'c', $x_3)
$x_1->func_1($x_2, $x_2->{'c'}, 'c', 'c', $x_3);
$x_1->func_1($x_2,$x_2->{'c'},'c','c',$x_3)
#######################################################################
{"success":false}
eval { $x_1->{'c'}->func_1($x_2, $x_1->{'c'}) }
eval {     do {         $x_1->{'c'}->func_1($x_2, $x_1->{'c'})     } };
eval({ $x_1->{'c'}->func_1($x_2,$x_1->{'c'})})
#######################################################################
{"success":false}
scalar keys %{ $x_1 } != scalar keys %{ $x_2 } 
(scalar(keys(%{$x_1;})) != scalar(keys(%{$x_2;})));
scalar(keys((%{ $x_1} != scalar(keys(%{ $x_2})))))
#######################################################################
{"success":false}
$x_1 = [ sort { $x_2 cmp $x_3 } keys %{ $x_4 } ]
($x_1 = [(sort {($x_2 cmp $x_3);} keys(%{$x_4;}))]);
($x_1 = [ sort({ ($x_2 cmp $x_3)}keys(%{ $x_4}))])
#######################################################################
{"success":true}
$x_1 =~ /^\-?[0-9]*(\.[0-9]*)?$/ and length $x_1
(($x_1 =~ /^\-?[0-9]*(\.[0-9]*)?$/) and length($x_1));
(($x_1 =~ /^\-?[0-9]*(\.[0-9]*)?$/) and length($x_1))
#######################################################################
{"success":true}
$x_1 = $x_2->func_1($x_3, $x_4, $x_5, $x_6, $x_7)
($x_1 = $x_2->func_1($x_3, $x_4, $x_5, $x_6, $x_7));
($x_1 = $x_2->func_1($x_3,$x_4,$x_5,$x_6,$x_7))
#######################################################################
{"success":true}
$x_1->func_1( $x_2->[$x_3], $x_4->[$x_3], $x_5, )
$x_1->func_1($x_2->[$x_3], $x_4->[$x_3], $x_5);
$x_1->func_1( $x_2->[$x_3],$x_4->[$x_3],$x_5)
#######################################################################
{"success":true}
$x_1->func_1($x_2, $x_2->{'c'}, $x_3, $x_4, $x_5)
$x_1->func_1($x_2, $x_2->{'c'}, $x_3, $x_4, $x_5);
$x_1->func_1($x_2,$x_2->{'c'},$x_3,$x_4,$x_5)
#######################################################################
{"success":true}
$x_1->func_1($x_2, $x_3->{'c'}, $x_4, $x_5, $x_6)
$x_1->func_1($x_2, $x_3->{'c'}, $x_4, $x_5, $x_6);
$x_1->func_1($x_2,$x_3->{'c'},$x_4,$x_5,$x_6)
#######################################################################
{"success":true}
$x_1->func_1($x_2->{'c'}, $x_3, $x_4, $x_5, $x_2)
$x_1->func_1($x_2->{'c'}, $x_3, $x_4, $x_5, $x_2);
$x_1->func_1($x_2->{'c'},$x_3,$x_4,$x_5,$x_2)
#######################################################################
{"success":false}
$x_1->func_1($x_2, $x_3, 'c', ($x_4 // 'c'), $x_4)
$x_1->func_1($x_2, $x_3, 'c', ($x_4 // 'c'), $x_4);
$x_1->func_1($x_2,$x_3,'c',(($x_4 // 'c')),$x_4)
#######################################################################
{"success":true}
$x_1->func_1($x_2, $x_3->[$x_4], $x_5, $x_4, $x_6)
$x_1->func_1($x_2, $x_3->[$x_4], $x_5, $x_4, $x_6);
$x_1->func_1($x_2,$x_3->[$x_4],$x_5,$x_4,$x_6)
#######################################################################
{"success":true}
$x_1->func_1('c', $x_2) or $x_1->func_2('c', $x_2)
($x_1->func_1('c', $x_2) or $x_1->func_2('c', $x_2));
($x_1->func_1('c',$x_2) or $x_1->func_2('c',$x_2))
#######################################################################
{"success":true}
defined $x_1->{'c'} and not $x_2->func_1('c', $x_3)
(defined($x_1->{'c'}) and not($x_2->func_1('c', $x_3)));
(defined($x_1->{'c'}) and not($x_2->func_1('c',$x_3)))
#######################################################################
{"success":true}
return sprintf("$x_i", $x_1->func_1, $x_1->message)
(return (sprintf("$x_i", $x_1->func_1, $x_1->message)));
return(sprintf("$x_i",$x_1->func_1,$x_1->message))
#######################################################################
{"success":false}
( not $x_1 ) && ( exists $x_2->{b}|| exists $x_3{b})
($x_1 or (exists $x_2->{'b'} or exists $x_3{'b'}));
(( not($x_1)) && ( (exists($x_2->{'b'}) || exists($x_3{'b'}))))
#######################################################################
{"success":false}
$x_1 = [ sort { lc $x_2 cmp lc $x_3 } keys %{ $x_4 } ]
($x_1 = [(sort {(lc($x_2) cmp lc($x_3));} keys(%{$x_4;}))]);
($x_1 = [ sort({ (lc($x_2) cmp lc($x_3))}keys(%{ $x_4}))])
#######################################################################
{"success":false}
$x_1->("$x_i". (join "$x_i", @{ $x_2->{'c'} }) . 'c') 
&$x_1((("$x_i" . join("$x_i", @{$x_2->{'c'};})) . 'c'));
$x_1->((("$x_i" . (join("$x_i",@{ $x_2->{'c'}}))) . 'c'))
#######################################################################
{"success":false}
exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}
((exists $x_1->{'b'} or exists $x_1->{'b'}) or exists $x_1->{'b'});
((exists($x_1->{'b'}) || exists($x_1->{'b'})) || exists($x_1->{'b'}))
#######################################################################
{"success":false}
grep { $x_1->func_1( $x_2, $x_3, $x_4 ) } @{ $x_5->{b}}
grep({$x_1->func_1($x_2, $x_3, $x_4);} @{$$x_5{'b'};});
grep({ $x_1->func_1( $x_2,$x_3,$x_4)}@{ $x_5->{'b'}})
#######################################################################
{"success":false}
map { $x_1 => 1} grep { ref $x_1 eq ref 'c'} @{ $x_2 } 
map({($x_1, 1);} grep({(ref($x_1) eq ref('c'));} @{$x_2;}));
map({ $x_1=>1}grep({ (ref($x_1) eq ref('c'))}@{ $x_2}))
#######################################################################
{"success":false}
(defined $x_1->{'c'} and not $x_1->{'c'}) or $x_1->{'c'}
((defined($x_1->{'c'}) and not($x_1->{'c'})) or $x_1->{'c'});
(((defined($x_1->{'c'}) and not($x_1->{'c'}))) or $x_1->{'c'})
#######################################################################
{"success":false}
$x_1->func_1( $x_2->[$x_3], $x_4->[$x_3], $x_5, func_2, )
$x_1->func_1($x_2->[$x_3], $x_4->[$x_3], $x_5, func_2());
$x_1->func_1( $x_2->[$x_3],$x_4->[$x_3],$x_5,func_2)
#######################################################################
{"success":false}
defined $x_1 and ref $x_1 eq 'c'and !defined $x_1->{$x_2}
((defined($x_1) and (ref($x_1) eq 'c')) and not(defined($x_1->{$x_2})));
((defined($x_1) and (ref($x_1) eq 'c')) and !(defined($x_1->{$x_2})))
#######################################################################
{"success":true}
return ($x_1 =~ /^\-?[0-9]*(\.[0-9]*)?$/ and length $x_1) 
(return ((($x_1 =~ /^\-?[0-9]*(\.[0-9]*)?$/) && length($x_1))));
return((($x_1 =~ /^\-?[0-9]*(\.[0-9]*)?$/) and length($x_1)))
#######################################################################
{"success":true}
push $x_1, $x_2->func_1($x_3, $x_3->{'c'}, $x_4, $x_5, $x_6)
push($x_1, $x_2->func_1($x_3, $x_3->{'c'}, $x_4, $x_5, $x_6));
push($x_1,$x_2->func_1($x_3,$x_3->{'c'},$x_4,$x_5,$x_6))
#######################################################################
{"success":false}
( defined $x_1 ) && ( ref $x_1 eq ref 1) &&( func_1( $x_1 ) )
((defined($x_1) and (ref($x_1) eq ref(1))) and func_1($x_1));
((( defined($x_1)) && ( (ref($x_1) eq ref(1)))) && ( func_1( $x_1)))
#######################################################################
{"success":false}
push @{$x_1->{b}}, $x_1->func_1($x_2, $x_3, $x_4, $x_5, $x_6)
push(@{$$x_1{'b'};}, $x_1->func_1($x_2, $x_3, $x_4, $x_5, $x_6));
push(@{$x_1->{'b'}},$x_1->func_1($x_2,$x_3,$x_4,$x_5,$x_6))
#######################################################################
{"success":false}
return { b=> (@{$x_1->{b}} ? func_1 : func_2), b=> $x_1->{b}, }
(return ({'b', (@{$x_1->{'b'};} ? func_1() : func_2()), 'b', $x_1->{'b'}}));
return({ 'b'=>(@{$x_1->{'b'}}?func_1:func_2),'b'=>$x_1->{'b'}})
#######################################################################
{"success":false}
!$x_1 and defined $x_2 and ref $x_2 eq 'c'and defined $x_2->{'c'}
(((not($x_1) and defined($x_2)) and (ref($x_2) eq 'c')) and defined($x_2->{'c'}));
(((!($x_1) and defined($x_2)) and (ref($x_2) eq 'c')) and defined($x_2->{'c'}))
#######################################################################
{"success":false}
$x_1->{'c'} and ($x_2->func_1('c', $x_3) or $x_2->func_2('c', $x_3))
($x_1->{'c'} and ($x_2->func_1('c', $x_3) || $x_2->func_2('c', $x_3)));
($x_1->{'c'} and (($x_2->func_1('c',$x_3) or $x_2->func_2('c',$x_3))))
#######################################################################
{"success":false}
defined $x_1->{'c'} and !$x_2->func_1($x_1->{'c'}, $x_3, $x_4, $x_5)
(defined($x_1->{'c'}) and not($x_2->func_1($x_1->{'c'}, $x_3, $x_4, $x_5)));
(defined($x_1->{'c'}) and !($x_2->func_1($x_1->{'c'},$x_3,$x_4,$x_5)))
#######################################################################
{"success":false}
push @{$x_1->{b}}, $x_1->func_1($x_2->{'c'}, $x_3, $x_4, $x_5, $x_2)
push(@{$$x_1{'b'};}, $x_1->func_1($x_2->{'c'}, $x_3, $x_4, $x_5, $x_2));
push(@{$x_1->{'b'}},$x_1->func_1($x_2->{'c'},$x_3,$x_4,$x_5,$x_2))
#######################################################################
{"success":true}
$x_1->func_1($x_2, $x_3, $x_4->{'c'}, $x_4->{'c'}, $x_4->{'c'}, $x_5)
$x_1->func_1($x_2, $x_3, $x_4->{'c'}, $x_4->{'c'}, $x_4->{'c'}, $x_5);
$x_1->func_1($x_2,$x_3,$x_4->{'c'},$x_4->{'c'},$x_4->{'c'},$x_5)
#######################################################################
{"success":false}
push @{$x_1->{b}}, $x_1->func_1($x_2, $x_3->[$x_4], $x_5, $x_4, $x_6)
push(@{$$x_1{'b'};}, $x_1->func_1($x_2, $x_3->[$x_4], $x_5, $x_4, $x_6));
push(@{$x_1->{'b'}},$x_1->func_1($x_2,$x_3->[$x_4],$x_5,$x_4,$x_6))
#######################################################################
{"success":true}
$x_1->{'c'} and $x_2->func_1('c', $x_3) and length($x_3) < $x_1->{'c'}
(($x_1->{'c'} and $x_2->func_1('c', $x_3)) and (length($x_3) < $x_1->{'c'}));
(($x_1->{'c'} and $x_2->func_1('c',$x_3)) and (length($x_3) < $x_1->{'c'}))
#######################################################################
{"success":true}
$x_1->{'c'} and $x_2->func_1('c', $x_3) and length($x_3) > $x_1->{'c'}
(($x_1->{'c'} and $x_2->func_1('c', $x_3)) and (length($x_3) > $x_1->{'c'}));
(($x_1->{'c'} and $x_2->func_1('c',$x_3)) and (length($x_3) > $x_1->{'c'}))
#######################################################################
{"success":false}
exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}
(((exists $x_1->{'b'} or exists $x_1->{'b'}) or exists $x_1->{'b'}) or exists $x_1->{'b'});
(((exists($x_1->{'b'}) || exists($x_1->{'b'})) || exists($x_1->{'b'})) || exists($x_1->{'b'}))
#######################################################################
{"success":true}
$x_1->func_1( b=> $x_2, b=> "$x_i", b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, )
$x_1->func_1('b', $x_2, 'b', "$x_i", 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6);
$x_1->func_1( 'b'=>$x_2,'b'=>"$x_i",'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6)
#######################################################################
{"success":false}
$x_1->func_1( $x_2->{ $x_3->[ $x_4 ] }, $x_5->{ $x_6->[ $x_4 ] }, $x_7, func_2, )
$x_1->func_1($$x_2{$x_3->[$x_4]}, $$x_5{$x_6->[$x_4]}, $x_7, func_2());
$x_1->func_1( $x_2->{ $x_3->[ $x_4]},$x_5->{ $x_6->[ $x_4]},$x_7,func_2)
#######################################################################
{"success":true}
$x_1->func_1( b=> $x_2, b=> "$x_i", b=> $x_3->{b}, b=> "$x_i", b=> $x_4, b=> 0, )
$x_1->func_1('b', $x_2, 'b', "$x_i", 'b', $x_3->{'b'}, 'b', "$x_i", 'b', $x_4, 'b', 0);
$x_1->func_1( 'b'=>$x_2,'b'=>"$x_i",'b'=>$x_3->{'b'},'b'=>"$x_i",'b'=>$x_4,'b'=>0)
#######################################################################
{"success":true}
$x_1->func_1( b=> 'c', b=> 'c', b=> $x_1->func_2, b=> 'c', b=> $x_2, b=> $x_1->{b}, )
$x_1->func_1('b', 'c', 'b', 'c', 'b', $x_1->func_2, 'b', 'c', 'b', $x_2, 'b', $x_1->{'b'});
$x_1->func_1( 'b'=>'c','b'=>'c','b'=>$x_1->func_2,'b'=>'c','b'=>$x_2,'b'=>$x_1->{'b'})
#######################################################################
{"success":true}
defined $x_1->{'c'} or defined $x_1->{'c'} or defined $x_1->{'c'} or $x_1->{'c'} eq 'c'
(((defined($x_1->{'c'}) or defined($x_1->{'c'})) or defined($x_1->{'c'})) or ($x_1->{'c'} eq 'c'));
(((defined($x_1->{'c'}) or defined($x_1->{'c'})) or defined($x_1->{'c'})) or ($x_1->{'c'} eq 'c'))
#######################################################################
{"success":false}
push @{$x_1->{b}}, $x_1->func_1($x_2, $x_3, $x_4->{'c'}, $x_4->{'c'}, $x_4->{'c'}, $x_5)
push(@{$$x_1{'b'};}, $x_1->func_1($x_2, $x_3, $x_4->{'c'}, $x_4->{'c'}, $x_4->{'c'}, $x_5));
push(@{$x_1->{'b'}},$x_1->func_1($x_2,$x_3,$x_4->{'c'},$x_4->{'c'},$x_4->{'c'},$x_5))
#######################################################################
{"success":true}
$x_1->func_1( b=> $x_2, b=> "$x_i", b=> "$x_i", b=> $x_3, b=> "$x_i", b=> $x_4, b=> $x_5, )
$x_1->func_1('b', $x_2, 'b', "$x_i", 'b', "$x_i", 'b', $x_3, 'b', "$x_i", 'b', $x_4, 'b', $x_5);
$x_1->func_1( 'b'=>$x_2,'b'=>"$x_i",'b'=>"$x_i",'b'=>$x_3,'b'=>"$x_i",'b'=>$x_4,'b'=>$x_5)
#######################################################################
{"success":false}
exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}
((((exists $x_1->{'b'} or exists $x_1->{'b'}) or exists $x_1->{'b'}) or exists $x_1->{'b'}) or exists $x_1->{'b'});
((((exists($x_1->{'b'}) || exists($x_1->{'b'})) || exists($x_1->{'b'})) || exists($x_1->{'b'})) || exists($x_1->{'b'}))
#######################################################################
{"success":true}
$x_1->func_1( b=> $x_2, b=> "$x_i", b=> "$x_i", b=> $x_3->[$x_2], b=> "$x_i", b=> $x_4, b=> $x_5, )
$x_1->func_1('b', $x_2, 'b', "$x_i", 'b', "$x_i", 'b', $x_3->[$x_2], 'b', "$x_i", 'b', $x_4, 'b', $x_5);
$x_1->func_1( 'b'=>$x_2,'b'=>"$x_i",'b'=>"$x_i",'b'=>$x_3->[$x_2],'b'=>"$x_i",'b'=>$x_4,'b'=>$x_5)
#######################################################################
{"success":true}
$x_1->func_1( b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> "$x_i", b=> $x_6, b=> "$x_i", b=> $x_7, b=> 0, )
$x_1->func_1('b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', "$x_i", 'b', $x_6, 'b', "$x_i", 'b', $x_7, 'b', 0);
$x_1->func_1( 'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>"$x_i",'b'=>$x_6,'b'=>"$x_i",'b'=>$x_7,'b'=>0)
#######################################################################
{"success":true}
$x_1->func_1( b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> "$x_i", b=> $x_6, b=> "$x_i", b=> $x_7, b=> $x_8, )
$x_1->func_1('b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', "$x_i", 'b', $x_6, 'b', "$x_i", 'b', $x_7, 'b', $x_8);
$x_1->func_1( 'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>"$x_i",'b'=>$x_6,'b'=>"$x_i",'b'=>$x_7,'b'=>$x_8)
#######################################################################
{"success":false}
exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}|| exists $x_1->{b}
(((((exists $x_1->{'b'} or exists $x_1->{'b'}) or exists $x_1->{'b'}) or exists $x_1->{'b'}) or exists $x_1->{'b'}) or exists $x_1->{'b'});
(((((exists($x_1->{'b'}) || exists($x_1->{'b'})) || exists($x_1->{'b'})) || exists($x_1->{'b'})) || exists($x_1->{'b'})) || exists($x_1->{'b'}))
#######################################################################
{"success":true}
$x_1->func_1( b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, b=> $x_11, )
$x_1->func_1('b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10, 'b', $x_11);
$x_1->func_1( 'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10,'b'=>$x_11)
#######################################################################
{"success":true}
$x_1->func_1( b=> $x_2, b=> $x_2, b=> "$x_i", b=> $x_3, b=> "$x_i", b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, )
$x_1->func_1('b', $x_2, 'b', $x_2, 'b', "$x_i", 'b', $x_3, 'b', "$x_i", 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8);
$x_1->func_1( 'b'=>$x_2,'b'=>$x_2,'b'=>"$x_i",'b'=>$x_3,'b'=>"$x_i",'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8)
#######################################################################
{"success":true}
$x_1 = $x_3->$x_2( b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, b=> $x_11, b=> $x_12, b=> $x_13, )
($x_1 = $x_3->$x_2('b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10, 'b', $x_11, 'b', $x_12, 'b', $x_13));
($x_1 = $x_3->$x_2( 'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10,'b'=>$x_11,'b'=>$x_12,'b'=>$x_13))
#######################################################################
{"success":true}
$x_1->func_1( b=> $x_2, b=> $x_2, b=> "$x_i", b=> $x_3, b=> "$x_i", b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7->{$x_2}, b=> $x_8, )
$x_1->func_1('b', $x_2, 'b', $x_2, 'b', "$x_i", 'b', $x_3, 'b', "$x_i", 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7->{$x_2}, 'b', $x_8);
$x_1->func_1( 'b'=>$x_2,'b'=>$x_2,'b'=>"$x_i",'b'=>$x_3,'b'=>"$x_i",'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7->{$x_2},'b'=>$x_8)
#######################################################################
{"success":false}
$x_1->func_1->( b=> func_2, b=> "$x_i", b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, )
$x_1->func_1->('b', func_2(), 'b', "$x_i", 'b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10);
$x_1->func_1->( 'b'=>func_2,'b'=>"$x_i",'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10)
#######################################################################
{"success":false}
$x_1->func_1->( b=> func_2, b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, b=> $x_11, ) 
$x_1->func_1->('b', func_2(), 'b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10, 'b', $x_11);
$x_1->func_1->( 'b'=>func_2,'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10,'b'=>$x_11)
#######################################################################
{"success":false}
$x_1->func_1->( b=> func_2, b=> "$x_i", b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, ) 
$x_1->func_1->('b', func_2(), 'b', "$x_i", 'b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10);
$x_1->func_1->( 'b'=>func_2,'b'=>"$x_i",'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10)
#######################################################################
{"success":false}
$x_1->func_1->( b=> func_2, b=> "$x_i", b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> "$x_i", b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, ) 
$x_1->func_1->('b', func_2(), 'b', "$x_i", 'b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', "$x_i", 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9);
$x_1->func_1->( 'b'=>func_2,'b'=>"$x_i",'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>"$x_i",'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9)
#######################################################################
{"success":false}
$x_1->func_1->( b=> func_2, b=> "$x_i", b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> scalar $x_9, b=> $x_10, ) 
$x_1->func_1->('b', func_2(), 'b', "$x_i", 'b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', scalar($x_9), 'b', $x_10);
$x_1->func_1->( 'b'=>func_2,'b'=>"$x_i",'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>scalar($x_9),'b'=>$x_10)
#######################################################################
{"success":false}
return [ $x_1->func_1->( b=> func_2, b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, b=> $x_11, ) ]
(return ([$x_1->func_1->('b', func_2(), 'b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10, 'b', $x_11)]));
return([ $x_1->func_1->( 'b'=>func_2,'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10,'b'=>$x_11)])
#######################################################################
{"success":false}
return [ $x_1->func_1->( b=> func_2, b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, b=> $x_11, ) ] 
(return ([$x_1->func_1->('b', func_2(), 'b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10, 'b', $x_11)]));
return([ $x_1->func_1->( 'b'=>func_2,'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10,'b'=>$x_11)])
#######################################################################
{"success":false}
return [ $x_1->func_1->( b=> func_2, b=> "$x_i", b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, ) ] 
(return ([$x_1->func_1->('b', func_2(), 'b', "$x_i", 'b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10)]));
return([ $x_1->func_1->( 'b'=>func_2,'b'=>"$x_i",'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10)])
#######################################################################
{"success":false}
push @$x_1, $x_2->func_1->( b=> func_2, b=> "$x_i", b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, b=> $x_11, )
push(@$x_1, $x_2->func_1->('b', func_2(), 'b', "$x_i", 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10, 'b', $x_11));
push(@$x_1,$x_2->func_1->( 'b'=>func_2,'b'=>"$x_i",'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10,'b'=>$x_11))
#######################################################################
{"success":false}
push @$x_1, $x_2->func_1->( b=> func_2, b=> "$x_i", b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, b=> $x_11, ) 
push(@$x_1, $x_2->func_1->('b', func_2(), 'b', "$x_i", 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10, 'b', $x_11));
push(@$x_1,$x_2->func_1->( 'b'=>func_2,'b'=>"$x_i",'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10,'b'=>$x_11))
#######################################################################
{"success":false}
push @$x_1, $x_2->func_1->( b=> func_2, b=> "$x_i", b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> "$x_i", b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, ) 
push(@$x_1, $x_2->func_1->('b', func_2(), 'b', "$x_i", 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', "$x_i", 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10));
push(@$x_1,$x_2->func_1->( 'b'=>func_2,'b'=>"$x_i",'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>"$x_i",'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10))
#######################################################################
{"success":false}
return [ $x_1->func_1->( b=> func_2, b=> "$x_i", b=> $x_2, b=> $x_3, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> scalar $x_9, b=> $x_10, ) ] 
(return ([$x_1->func_1->('b', func_2(), 'b', "$x_i", 'b', $x_2, 'b', $x_3, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', scalar($x_9), 'b', $x_10)]));
return([ $x_1->func_1->( 'b'=>func_2,'b'=>"$x_i",'b'=>$x_2,'b'=>$x_3,'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>scalar($x_9),'b'=>$x_10)])
#######################################################################
{"success":true}
$x_1 = $x_2->func_1( b=> $x_2->{b}{$x_3}, b=> $x_4, b=> $x_5, b=> $x_6, b=> $x_7, b=> $x_8, b=> $x_9, b=> $x_10, b=> $x_11, b=> $x_12, b=> $x_3, b=> $x_13, )
($x_1 = $x_2->func_1('b', $x_2->{'b'}{$x_3}, 'b', $x_4, 'b', $x_5, 'b', $x_6, 'b', $x_7, 'b', $x_8, 'b', $x_9, 'b', $x_10, 'b', $x_11, 'b', $x_12, 'b', $x_3, 'b', $x_13));
($x_1 = $x_2->func_1( 'b'=>$x_2->{'b'}{$x_3},'b'=>$x_4,'b'=>$x_5,'b'=>$x_6,'b'=>$x_7,'b'=>$x_8,'b'=>$x_9,'b'=>$x_10,'b'=>$x_11,'b'=>$x_12,'b'=>$x_3,'b'=>$x_13))
#######################################################################